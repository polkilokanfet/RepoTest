<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\HVTApp.Model\bin\Debug\HVTApp.Infrastructure.dll" #>
<#@ assembly name="$(SolutionDir)\HVTApp.Model\bin\Debug\HVTApp.Model.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HVTApp.Model.POCOs" #>
<#@ import namespace="HVTApp.Infrastructure" #>
<#@ output extension=".txt" #>
<#
	var modelTypes = GetModelTypes();

    GenerateFields(modelTypes);

#><#+

    private void GenerateFields(IEnumerable<Type> modelTypes)
    {
        foreach(var modelType in modelTypes)
        {
            GenerateField(modelType);
        }
    }




	private void GenerateField(Type modelType)
	{
		var allProperties = modelType.GetProperties().Where(x => !Equals(x.Name, "Id"));


		//Простые double свойства
		var digitProperties = allProperties.Where(p => Equals(p.PropertyType, typeof(double)) || Equals(p.PropertyType, typeof(int)) || Equals(p.PropertyType, typeof(Nullable<int>))).ToList();
		//Простые date свойства
		var dateProperties = allProperties.Where(p => Equals(p.PropertyType, typeof(DateTime)) || Equals(p.PropertyType, typeof(Nullable<DateTime>))).ToList();
		//Простые свойства
		var allSimpleProperties = allProperties.Where(p => IsSimple(p.PropertyType)).Except(digitProperties).Except(dateProperties).ToList();

		//Перечисления
		var allCollectionProperties = allProperties.Except(allSimpleProperties)
				.Where(p => p.PropertyType.GetInterfaces()
				.Any(x => x.IsGenericType && x.GetGenericTypeDefinition() == typeof(ICollection<>)));

		var collectionComplexProperties = allCollectionProperties.Where(x => !CollectionMemberTypeIsSimple(x.PropertyType)).ToList();

		//Сложные свойства
		//var allComplexProperties = allProperties.Except(simpleProperties).Where(p => p.PropertyType.IsClass && !typeof(IEnumerable).IsAssignableFrom(p.PropertyType));
		var allComplexProperties = allProperties.Except(allSimpleProperties).Except(allCollectionProperties).Except(digitProperties).Except(dateProperties).ToList();

		var complexSetProperties = allComplexProperties.Where(p => p.CanWrite).ToList();
		var complexGetProperties = allComplexProperties.Where(p => !p.CanWrite).ToList();

#>========================================== Fields for <#=modelType.Name#> ==========================================

    <infg:XamDataGrid x:Name="<#=modelType.Name#>ListGrid">
        
        <infg:XamDataGrid.ContextMenu>
            <ContextMenu>
                <MenuItem Header="Export to Excel"                                        
                          Command="{Binding ExportToExcel}"
                          CommandParameter="{Binding PlacementTarget, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}}">
                </MenuItem>
            </ContextMenu>
        </infg:XamDataGrid.ContextMenu>

        <infg:XamDataGrid.FieldLayouts>
            <infg:FieldLayout>
                <infg:FieldLayout.Fields>
<#+
		GenerateFieldsForSimpleProperties(allSimpleProperties);
#>
<#+
		GenerateFieldsForDigitProperties(digitProperties);
#>
<#+
		GenerateFieldsForDateProperties(dateProperties);
#>
<#+
		GenerateFieldsForComplexProperties(complexSetProperties);
		//GenerateCollectionComplexProperties(collectionComplexProperties);
	#>
                </infg:FieldLayout.Fields>
            </infg:FieldLayout>

        </infg:XamDataGrid.FieldLayouts>
    </infg:XamDataGrid>


	<#+
	}
  //генерация свойств простых типов.
  private void GenerateFieldsForSimpleProperties(IEnumerable<PropertyInfo> properties)
  {
    foreach (var property in properties)
    {
#>                    <infg:TextField Name="<#=property.Name#>" Label="<#=property.Name#>" Width="Auto"/>
<#+ 
    }
  }

  private void GenerateFieldsForDigitProperties(IEnumerable<PropertyInfo> properties)
  {
    foreach (var property in properties)
    {
#>                    <infg:NumericField Name="<#=property.Name#>" Label="<#=property.Name#>" Width="Auto"/>
<#+ 
    }
  }

  private void GenerateFieldsForDateProperties(IEnumerable<PropertyInfo> properties)
  {
    foreach (var property in properties)
    {
#>                    <infg:DateTimeField Name="<#=property.Name#>" Label="<#=property.Name#>" Width="Auto"/>
<#+ 
    }
  }

  private void GenerateFieldsForComplexProperties(IEnumerable<PropertyInfo> properties)
  {
    foreach (var property in properties)
    {
#>                    <infg:TextField Name="<#=property.Name#>" Label="<#=property.Name#>" Width="Auto" Converter="{StaticResource LookupToStringConverter}"/>
<#+ 
    }
  }

	
    //берем все классы модели.
    private IEnumerable<Type> GetModelTypes()
    {
        var ns = typeof(Address).Namespace;
        //return typeof(Address).Assembly.GetTypes().Where(x => !x.IsAbstract && !x.IsEnum && x.Namespace == ns && !x.Name.Contains("<"));
        return typeof(Address).Assembly.GetTypes().Where(x => GetBaseTypes(x).Contains(typeof(BaseEntity)));
    }
    
	private IEnumerable<Type> GetBaseTypes(Type type)
        {
            List<Type> result = new List<Type>();
            while (type.BaseType != null)
            {
                result.Add(type.BaseType);
                type = type.BaseType;
            }
            return result;
        }


    //тип простой
    private bool IsSimple(Type type)
    {
        return type.IsValueType || type == typeof (string);
    }

    //коллекция простых типов?
    private bool CollectionMemberTypeIsSimple(Type genericCollectionType)
    {
        var tt = genericCollectionType.GetInterfaces();
        var t = genericCollectionType.GetInterfaces()
            .First(x => x.IsGenericType && x.GetGenericTypeDefinition() == typeof (ICollection<>))
            .GetGenericArguments()[0];

        return IsSimple(t);
    }
    
    //возвращаем имя типа
    private string GetTypeName(Type type)
    {
        if (type.IsGenericType)
        {
            var genericArguments = type.GetGenericArguments().Select(t => GetTypeName(t)).ToArray();
            var typeDefinition = type.GetGenericTypeDefinition().FullName;
            typeDefinition = typeDefinition.Substring(0, typeDefinition.IndexOf('`'));
            return string.Format("{0}<{1}>", typeDefinition, string.Join(",", genericArguments));
        }
        else
        {
            return type.FullName;
        }
    }

#>