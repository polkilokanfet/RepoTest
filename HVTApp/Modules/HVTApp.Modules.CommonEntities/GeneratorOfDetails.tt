<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\HVTApp.Model\bin\Debug\HVTApp.Infrastructure.dll" #>
<#@ assembly name="$(SolutionDir)\HVTApp.Model\bin\Debug\HVTApp.Model.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HVTApp.Model.POCOs" #>
<#@ import namespace="HVTApp.Infrastructure" #>
<#@ output extension=".txt" #>
<#
	var modelTypes = GetModelTypes();
    GenerateDetails(modelTypes);

#><#+

    private void GenerateDetails(IEnumerable<Type> modelTypes)
    {
        foreach(var modelType in modelTypes)
        {
            GenerateField(modelType);
        }
    }




	private void GenerateField(Type modelType)
	{
		var allProperties = modelType.GetProperties().Where(x => !Equals(x.Name, "Id"));


		//Простые int свойства
		var intProperties = allProperties.Where(p => Equals(p.PropertyType, typeof(int)) || Equals(p.PropertyType, typeof(Nullable<int>))).ToList();
		//Простые double свойства
		var doubleProperties = allProperties.Where(p => Equals(p.PropertyType, typeof(double)) || Equals(p.PropertyType, typeof(Nullable<double>))).ToList();
		//Простые date свойства
		var dateProperties = allProperties.Where(p => Equals(p.PropertyType, typeof(DateTime)) || Equals(p.PropertyType, typeof(Nullable<DateTime>))).ToList();
		//Простые string свойства
		var stringProperties = allProperties.Where(p => Equals(p.PropertyType, typeof(string))).ToList();
		//Простые свойства
		var allSimpleProperties = allProperties.Where(p => IsSimple(p.PropertyType)).Except(doubleProperties).Except(dateProperties).ToList();

		//Перечисления
		var allCollectionProperties = allProperties.Except(allSimpleProperties)
				.Where(p => p.PropertyType.GetInterfaces()
				.Any(x => x.IsGenericType && x.GetGenericTypeDefinition() == typeof(ICollection<>)));

		var collectionComplexProperties = allCollectionProperties.Where(x => !CollectionMemberTypeIsSimple(x.PropertyType)).ToList();

		//Сложные свойства
		//var allComplexProperties = allProperties.Except(simpleProperties).Where(p => p.PropertyType.IsClass && !typeof(IEnumerable).IsAssignableFrom(p.PropertyType));
		var allComplexProperties = allProperties.Except(allSimpleProperties).Except(allCollectionProperties).Except(doubleProperties).Except(dateProperties).ToList();

		var complexSetProperties = allComplexProperties.Where(p => p.CanWrite).ToList();
		var complexGetProperties = allComplexProperties.Where(p => !p.CanWrite).ToList();

#>========================================== Fields for <#=modelType.Name#> ==========================================

<inf:ViewBase x:Class="HVTApp.UI.Views.<#=modelType.Name#>DetailsView"
              xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
              xmlns:inf="clr-namespace:HVTApp.Infrastructure;assembly=HVTApp.Infrastructure"
              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			  xmlns:infDP="http://infragistics.com/DataPresenter"
			  xmlns:infE="http://infragistics.com/Editors"
			  xmlns:core="clr-namespace:System;assembly=mscorlib"
              xmlns:controls="clr-namespace:HVTApp.UI.Controls">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*" MinWidth="200"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
<#+ for(var i = 0; i < allProperties.Count(); i++)
	{
#>            <RowDefinition Height="Auto"/>
<#+
	} 
#>        </Grid.RowDefinitions>

<#+
		int rowNum = 0;
		GenerateDetailsForStringProperties(stringProperties, ref rowNum);
		GenerateDetailsForDoubleProperties(doubleProperties, ref rowNum);
		GenerateDetailsForIntProperties(intProperties, ref rowNum);
		GenerateDetailsForDateProperties(dateProperties, ref rowNum);
		GenerateDetailsForComplexProperties(complexSetProperties, ref rowNum);
#>

    </Grid>
</inf:ViewBase>
<#+
	}
  //генерация свойств простых типов.
  private void GenerateDetailsForStringProperties(IEnumerable<PropertyInfo> properties, ref int rowNum)
  {
    foreach (var property in properties)
    {
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Name#>"/>
        <TextBox Grid.Column="1" Grid.Row="<#= rowNum #>" MinWidth="200" 
                 Text="{Binding Item.<#=property.Name#>, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

<#+ 
		rowNum++;
    }
  }

  private void GenerateDetailsForDoubleProperties(IEnumerable<PropertyInfo> properties, ref int rowNum)
  {
    foreach (var property in properties)
    {
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Name#>"/>
		<infE:XamNumericEditor Grid.Column="1" Grid.Row="<#= rowNum #>" 
                               Value="{Binding Item.<#=property.Name#>, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  />

<#+ 
		rowNum++;
    }
  }

    private void GenerateDetailsForIntProperties(IEnumerable<PropertyInfo> properties, ref int rowNum)
  {
    foreach (var property in properties)
    {
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Name#>"/>
		<infE:XamNumericEditor Grid.Column="1" Grid.Row="<#= rowNum #>"
							   ValueType="core:Int32"
                               Value="{Binding Item.<#=property.Name#>, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  />

<#+ 
		rowNum++;
    }
  }

  private void GenerateDetailsForDateProperties(IEnumerable<PropertyInfo> properties, ref int rowNum)
  {
    foreach (var property in properties)
    {
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Name#>"/>
        <DatePicker Grid.Column="1" Grid.Row="<#= rowNum #>" 
                    SelectedDate="{Binding Item.<#=property.Name#>, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

<#+ 
		rowNum++;
    }
  }

  private void GenerateDetailsForComplexProperties(IEnumerable<PropertyInfo> properties, ref int rowNum)
  {
    foreach (var property in properties)
    {
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Name#>"/>
        <controls:ChooseItemControl Grid.Column="1" Grid.Row="<#= rowNum #>" 
                                    Item="{Binding Item.<#=property.Name#>}" 
                                    AddItemCommand="{Binding Select<#=property.Name#>Command}" 
                                    RemoveItemCommand="{Binding Clear<#=property.Name#>Command}"/>

<#+ 
		rowNum++;
    }
  }

	
    //берем все классы модели.
    private IEnumerable<Type> GetModelTypes()
    {
        var ns = typeof(Address).Namespace;
        //return typeof(Address).Assembly.GetTypes().Where(x => !x.IsAbstract && !x.IsEnum && x.Namespace == ns && !x.Name.Contains("<"));
        return typeof(Address).Assembly.GetTypes().Where(x => GetBaseTypes(x).Contains(typeof(BaseEntity)));
    }
    
	private IEnumerable<Type> GetBaseTypes(Type type)
        {
            List<Type> result = new List<Type>();
            while (type.BaseType != null)
            {
                result.Add(type.BaseType);
                type = type.BaseType;
            }
            return result;
        }


    //тип простой
    private bool IsSimple(Type type)
    {
        return type.IsValueType || type == typeof (string);
    }

    //коллекция простых типов?
    private bool CollectionMemberTypeIsSimple(Type genericCollectionType)
    {
        var tt = genericCollectionType.GetInterfaces();
        var t = genericCollectionType.GetInterfaces()
            .First(x => x.IsGenericType && x.GetGenericTypeDefinition() == typeof (ICollection<>))
            .GetGenericArguments()[0];

        return IsSimple(t);
    }
    
    //возвращаем имя типа
    private string GetTypeName(Type type)
    {
        if (type.IsGenericType)
        {
            var genericArguments = type.GetGenericArguments().Select(t => GetTypeName(t)).ToArray();
            var typeDefinition = type.GetGenericTypeDefinition().FullName;
            typeDefinition = typeDefinition.Substring(0, typeDefinition.IndexOf('`'));
            return string.Format("{0}<{1}>", typeDefinition, string.Join(",", genericArguments));
        }
        else
        {
            return type.FullName;
        }
    }

#>