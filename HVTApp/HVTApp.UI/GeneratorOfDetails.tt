<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\HVTApp.Model\bin\Debug\HVTApp.Model.dll" #>
<#@ assembly name="$(SolutionDir)\HVTApp.Infrestructure\bin\Debug\HVTApp.Infrastructure.dll" #>
<#@ assembly name="$(SolutionDir)\HVTApp.UI\bin\Debug\HVTApp.UI.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HVTApp.Model.POCOs" #>
<#@ import namespace="HVTApp.Infrastructure" #>
<#@ import namespace="HVTApp.UI" #>
<#@ output extension=".txt" #>
<#
	var modelTypes = GeneratorHelpers.GetModelTypesPocos();
    GenerateDetails(modelTypes);

#><#+

    private void GenerateDetails(IEnumerable<Type> modelTypes)
    {
        foreach(var modelType in modelTypes)
        {
            GenerateField(modelType);
        }
    }


	private void GenerateField(Type modelType)
	{
		var allProperties = modelType.GetProperties().Where(x => !Equals(x.Name, "Id"));
		
		var complexSetProperties = modelType.AllComplexProperties().Where(p => p.CanWrite).ToList();
		var complexGetProperties = modelType.AllComplexProperties().Where(p => !p.CanWrite).ToList();

#>========================================== Details for <#=modelType.Name#> ==========================================

<inf:ViewBase x:Class="HVTApp.UI.Views.<#=modelType.Name#>DetailsView"
              xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
              xmlns:inf="clr-namespace:HVTApp.Infrastructure;assembly=HVTApp.Infrastructure"
              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			  xmlns:infDP="http://infragistics.com/DataPresenter"
			  xmlns:infE="http://infragistics.com/Editors"
			  xmlns:core="clr-namespace:System;assembly=mscorlib"
              xmlns:controls="clr-namespace:HVTApp.UI.Controls">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*" MinWidth="200"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
<#+ for(var i = 0; i < allProperties.Count(); i++)
	{
#>            <RowDefinition Height="Auto"/>
<#+
	} 
#>        </Grid.RowDefinitions>

<#+
		int rowNum = 0;
		GenerateDetailsForStringProperties(modelType.StringProperties(), ref rowNum);
		GenerateDetailsForIntProperties(modelType.SimpleProperties<int>(), ref rowNum);
		GenerateDetailsForDoubleProperties(modelType.SimpleProperties<double>(), ref rowNum);
		GenerateDetailsForDateProperties(modelType.SimpleProperties<DateTime>(), ref rowNum);
		GenerateDetailsForComplexProperties(complexSetProperties, ref rowNum);
		GenerateDetailsForCollectionComplexProperties(modelType.CollectionComplexProperties(), ref rowNum);
#>

    </Grid>
</inf:ViewBase>
<#+
	}



  private void GenerateDetailsForStringProperties(IEnumerable<PropertyInfo> properties, ref int rowNum)
  {
    foreach (var property in properties)
    {
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Designation()#>"/>
        <TextBox Grid.Column="1" Grid.Row="<#= rowNum #>" MinWidth="200" 
                 Text="{Binding Item.<#=property.Name#>, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

<#+ 
		rowNum++;
    }
  }

  private void GenerateDetailsForDoubleProperties(IEnumerable<PropertyInfo> properties, ref int rowNum)
  {
    foreach (var property in properties)
    {
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Designation()#>"/>
		<infE:XamNumericEditor Grid.Column="1" Grid.Row="<#= rowNum #>" 
                               Value="{Binding Item.<#=property.Name#>, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  />

<#+ 
		rowNum++;
    }
  }

  private void GenerateDetailsForIntProperties(IEnumerable<PropertyInfo> properties, ref int rowNum)
  {
    foreach (var property in properties)
    {
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Designation()#>"/>
		<infE:XamNumericEditor Grid.Column="1" Grid.Row="<#= rowNum #>"
							   ValueType="core:Int32"
                               Value="{Binding Item.<#=property.Name#>, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  />

<#+ 
		rowNum++;
    }
  }

  private void GenerateDetailsForDateProperties(IEnumerable<PropertyInfo> properties, ref int rowNum)
  {
    foreach (var property in properties)
    {
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Designation()#>"/>
        <DatePicker Grid.Column="1" Grid.Row="<#= rowNum #>" 
                    SelectedDate="{Binding Item.<#=property.Name#>, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

<#+ 
		rowNum++;
    }
  }

  private void GenerateDetailsForComplexProperties(IEnumerable<PropertyInfo> properties, ref int rowNum)
  {
    foreach (var property in properties)
    {
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Designation()#>"/>
        <controls:ChooseItemControl Grid.Column="1" Grid.Row="<#= rowNum #>" 
                                    Item="{Binding Item.<#=property.Name#>}" 
                                    AddItemCommand="{Binding Select<#=property.Name#>Command}" 
                                    RemoveItemCommand="{Binding Clear<#=property.Name#>Command}"/>

<#+ 
		rowNum++;
    }
  }

  private void GenerateDetailsForCollectionComplexProperties(IEnumerable<PropertyInfo> properties, ref int rowNum)
  {
    foreach (var property in properties)
    {
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Designation()#>"/>
        <controls:ChooseItemsListControl Grid.Column="1" Grid.Row="<#= rowNum #>"
										 Items="{Binding Path=Item.<#=property.Name#>}"
										 SelectedItem="{Binding Selected<#=property.Name#>Item, Mode=TwoWay}"
										 AddItemCommand="{Binding AddIn<#=property.Name#>Command}"
										 RemoveItemCommand="{Binding RemoveFrom<#=property.Name#>Command}"/>

<#+ 
		rowNum++;
    }
  }
#>