<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\HVTApp.Model\bin\Debug\HVTApp.Model.dll" #>
<#@ assembly name="$(SolutionDir)\HVTApp.Infrestructure\bin\Debug\HVTApp.Infrastructure.dll" #>
<#@ assembly name="$(SolutionDir)\HVTApp.UI\bin\Debug\HVTApp.UI.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HVTApp.Model.POCOs" #>
<#@ import namespace="HVTApp.Infrastructure" #>
<#@ import namespace="HVTApp.UI" #>
<#@ output extension=".txt" #>
<#
	var modelTypes = GeneratorHelpers.GetModelTypesPocos();

	GenerateDetailsViewModels(modelTypes);
	SaveGeneratedCodeAsFile("DetailsViewModels.g.cs", "ViewModels/Details/Generated");

	GenerateDetailsViews(modelTypes);
	SaveGeneratedCodeAsFile("DetailsViews.g.cs", "Views/Details/cs");

    GenerateDetailsViewsXaml(modelTypes);

#><#+


    private void GenerateDetailsViewModels(IEnumerable<Type> modelTypes)
	{
#>using HVTApp.Model.POCOs;
using HVTApp.UI.Wrapper;
using HVTApp.Model.Events;
using Microsoft.Practices.Unity;
using System.Windows.Input;
using Prism.Commands;
using System.Collections.Generic;
using System.Threading.Tasks;
using System;

namespace HVTApp.UI.ViewModels
{
<#+
        foreach(var modelType in modelTypes)
        {
            GenerateDetailsViewModel(modelType);
        }

#>
}
<#+
	}

    private void GenerateDetailsViewModel(Type modelType)
	{
#>
    public partial class <#=modelType.Name#>DetailsViewModel : BaseDetailsViewModel<<#=modelType.Name#>Wrapper, <#=modelType.Name#>, AfterSave<#=modelType.Name#>Event>
    {
<#+		
		foreach(var propInfo in modelType.AllComplexProperties())
        {
#>		private Func<Task<List<<#=propInfo.PropertyType.Name#>>>> _getEntitiesForSelect<#=propInfo.Name#>Command;
		public ICommand Select<#=propInfo.Name#>Command { get; private set; }
		public ICommand Clear<#=propInfo.Name#>Command { get; private set; }

<#+		}

		foreach(var propInfo in modelType.AllCollectionProperties())
        {
			var itemType = propInfo.PropertyType.GetInterfaces().First(x => x.IsGenericType && x.GetGenericTypeDefinition() == typeof(ICollection<>)).GenericTypeArguments[0].Name;
			var propertyName = propInfo.Name;

#>		private Func<Task<List<<#=itemType#>>>> _getEntitiesForAddIn<#=propertyName#>Command;
		public ICommand AddIn<#=propertyName#>Command { get; }
		public ICommand RemoveFrom<#=propertyName#>Command { get; }
		private <#=itemType#>Wrapper _selected<#=propertyName#>Item;
		public <#=itemType#>Wrapper Selected<#=propertyName#>Item 
		{ 
			get { return _selected<#=propertyName#>Item; }
			set 
			{ 
				if (Equals(_selected<#=propertyName#>Item, value)) return;
				_selected<#=propertyName#>Item = value;
				OnPropertyChanged();
				((DelegateCommand)RemoveFrom<#=propertyName#>Command).RaiseCanExecuteChanged();
			}
		}

<#+		}
#>
        public <#=modelType.Name#>DetailsViewModel(IUnityContainer container) : base(container) 
		{
<#+		
		foreach(var propInfo in modelType.AllComplexProperties())
        {
#>			
			if (_getEntitiesForSelect<#=propInfo.Name#>Command == null) _getEntitiesForSelect<#=propInfo.Name#>Command = async () => { return await WrapperDataService.GetRepository<<#=propInfo.PropertyType.Name#>>().GetAllAsync(); };
			if (Select<#=propInfo.Name#>Command == null) Select<#=propInfo.Name#>Command = new DelegateCommand(Select<#=propInfo.Name#>Command_Execute_Default);
			if (Clear<#=propInfo.Name#>Command == null) Clear<#=propInfo.Name#>Command = new DelegateCommand(Clear<#=propInfo.Name#>Command_Execute_Default);

<#+		}

		foreach(var propInfo in modelType.AllCollectionProperties())
        {
			var itemType = propInfo.PropertyType.GetInterfaces().First(x => x.IsGenericType && x.GetGenericTypeDefinition() == typeof(ICollection<>)).GenericTypeArguments[0].Name;
			var propertyName = propInfo.Name;

#>			
			if (_getEntitiesForAddIn<#=propertyName#>Command == null) _getEntitiesForAddIn<#=propertyName#>Command = async () => { return await WrapperDataService.GetRepository<<#=itemType#>>().GetAllAsync(); };;
			if (AddIn<#=propertyName#>Command == null) AddIn<#=propertyName#>Command = new DelegateCommand(AddIn<#=propertyName#>Command_Execute_Default);
			if (RemoveFrom<#=propertyName#>Command == null) RemoveFrom<#=propertyName#>Command = new DelegateCommand(RemoveFrom<#=propertyName#>Command_Execute_Default, RemoveFrom<#=propertyName#>Command_CanExecute_Default);

<#+		}
#>		}

<#+		



		foreach(var propInfo in modelType.AllComplexProperties())
        {
#>		private async void Select<#=propInfo.Name#>Command_Execute_Default() 
		{
            SelectAndSetWrapper<<#=propInfo.PropertyType.Name#>, <#=propInfo.PropertyType.Name#>Wrapper>(await _getEntitiesForSelect<#=propInfo.Name#>Command(), nameof(Item.<#=propInfo.Name#>), Item.<#=propInfo.Name#>?.Id);
		}

		private void Clear<#=propInfo.Name#>Command_Execute_Default() 
		{
		<#+ if (propInfo.CanWrite)
			{
#>				Item.<#=propInfo.Name#> = null;<#+
			} 
		#>
		    
		}

<#+		}

		foreach(var propInfo in modelType.AllCollectionProperties())
        {
			var itemType = propInfo.PropertyType.GetInterfaces().First(x => x.IsGenericType && x.GetGenericTypeDefinition() == typeof(ICollection<>)).GenericTypeArguments[0].Name;
			var propertyName = propInfo.Name;

#>			private async void AddIn<#=propertyName#>Command_Execute_Default()
			{
				SelectAndAddInListWrapper<<#=itemType#>, <#=itemType#>Wrapper>(await _getEntitiesForAddIn<#=propertyName#>Command(), Item.<#=propertyName#>);
			}

			private void RemoveFrom<#=propertyName#>Command_Execute_Default()
			{
				Item.<#=propertyName#>.Remove(Selected<#=propertyName#>Item);
			}

			private bool RemoveFrom<#=propertyName#>Command_CanExecute_Default()
			{
				return Selected<#=propertyName#>Item != null;
			}

<#+		}

#>

    }

<#+

	}


	private void GenerateDetailsViews(IEnumerable<Type> modelTypes)
	{
#>using HVTApp.Infrastructure;
using HVTApp.UI.Tabs;
using Prism.Events;
using Prism.Regions;
using HVTApp.UI.ViewModels;
using System.Windows;
using HVTApp.Infrastructure.Attributes;
using HVTApp.Model;
using HVTApp.Model.POCOs;
using System.Reflection;
using System.Linq;

namespace HVTApp.UI.Views
{
<#+
        foreach(var modelType in modelTypes)
        {

			var allProperties = modelType.GetProperties().Where(x => !Equals(x.Name, "Id"));
		
 #>
    public partial class <#=modelType.Name#>DetailsView : ViewBase
    {
        public <#=modelType.Name#>DetailsView()
        {
			InitializeComponent();
        }

        public <#=modelType.Name#>DetailsView(IRegionManager regionManager, IEventAggregator eventAggregator, <#=modelType.Name#>DetailsViewModel <#=modelType.Name#>DetailsViewModel) : base(regionManager, eventAggregator)
        {
            SetVisibilityProps();
			InitializeComponent();
            DataContext = <#=modelType.Name#>DetailsViewModel;
        }

        private void SetVisibilityProps()
        {
            NotUpdateAttribute attr;

<#+ 
			foreach(var propInfo in allProperties)
            {
#>
            attr = typeof(<#=modelType.FullName#>).GetProperty(nameof(<#=modelType.FullName#>.<#=propInfo.Name#>)).GetCustomAttribute<NotUpdateAttribute>();
            if (attr != null && attr.RolesCantUpdate.Contains(CommonOptions.User.RoleCurrent))
                Visibility<#=propInfo.Name#><#=modelType.Name#> = Visibility.Collapsed;

<#+ 
			}
#>

        }

<#+ 
			foreach(var propInfo in allProperties)
            {
#>

        public static readonly DependencyProperty Visibility<#=propInfo.Name#><#=modelType.Name#>Property = DependencyProperty.Register("Visibility<#=propInfo.Name#><#=modelType.Name#>", typeof(Visibility), typeof(ProjectDetailsView), new PropertyMetadata((System.Windows.Visibility.Visible)));
        public Visibility Visibility<#=propInfo.Name#><#=modelType.Name#>
        {
            get { return (Visibility) GetValue(Visibility<#=propInfo.Name#><#=modelType.Name#>Property); }
            set { SetValue(Visibility<#=propInfo.Name#><#=modelType.Name#>Property, value); }
        }

<#+ 
			}
#>
	}

<#+
        }
 #>
}
<#+
	}


    private void GenerateDetailsViewsXaml(IEnumerable<Type> modelTypes)
    {
        foreach(var modelType in modelTypes)
        {
            GenerateField(modelType);
			SaveGeneratedCodeAsFile(modelType.Name + "DetailsView.xaml", "Views/Details");
        }
    }


	private void GenerateField(Type modelType)
	{
		var allProperties = modelType.GetProperties().Where(x => !Equals(x.Name, "Id"));
		
		var complexSetProperties = modelType.AllComplexProperties().Where(p => p.CanWrite).ToList();
		var complexGetProperties = modelType.AllComplexProperties().Where(p => !p.CanWrite).ToList();

#><inf:ViewBase x:Class="HVTApp.UI.Views.<#=modelType.Name#>DetailsView"
              xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
              xmlns:inf="clr-namespace:HVTApp.Infrastructure;assembly=HVTApp.Infrastructure"
              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			  xmlns:infDP="http://infragistics.com/DataPresenter"
			  xmlns:infE="http://infragistics.com/Editors"
			  xmlns:core="clr-namespace:System;assembly=mscorlib"
              xmlns:controls="clr-namespace:HVTApp.UI.Controls"
			  x:Name="Root">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*" MinWidth="200"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
<#+ for(var i = 0; i < allProperties.Count(); i++)
	{
#>            <RowDefinition Height="Auto"/>
<#+
	} 
#>        </Grid.RowDefinitions>

<#+
		int rowNum = 0;
		foreach(var property in modelType.GetPropertiesForDetailView())
        {
			GenerateRow(property, modelType, ref rowNum);
		}
#>

    </Grid>
</inf:ViewBase>
<#+
	}

	  private void GenerateRow(PropertyInfo property, Type modelType, ref int rowNum)
	  {

		if (property.IsType<string>())
		{
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Designation()#>" Visibility="{Binding Visibility<#=property.Name#><#=modelType.Name#>, ElementName=Root}"/>
        <TextBox Grid.Column="1" Grid.Row="<#= rowNum #>" MinWidth="200" 
                 Text="{Binding Item.<#=property.Name#>, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
				 Visibility="{Binding Visibility<#=property.Name#><#=modelType.Name#>, ElementName=Root}"/>

<#+ 
			rowNum++;
		}

		if (property.IsType<int>() || property.IsType<int?>())
		{
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Designation()#>" Visibility="{Binding Visibility<#=property.Name#><#=modelType.Name#><#=modelType.Name#>, ElementName=Root}"/>
		<infE:XamNumericEditor Grid.Column="1" Grid.Row="<#= rowNum #>"
							   ValueType="core:Int32"
                               Value="{Binding Item.<#=property.Name#>, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
							   Visibility="{Binding Visibility<#=property.Name#><#=modelType.Name#><#=modelType.Name#>, ElementName=Root}"/>

<#+ 
		rowNum++;
		}

		if (property.IsType<double>() || property.IsType<double?>())
		{
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Designation()#>" Visibility="{Binding Visibility<#=property.Name#><#=modelType.Name#><#=modelType.Name#>, ElementName=Root}"/>
		<infE:XamNumericEditor Grid.Column="1" Grid.Row="<#= rowNum #>" 
                               Value="{Binding Item.<#=property.Name#>, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
							   Visibility="{Binding Visibility<#=property.Name#><#=modelType.Name#><#=modelType.Name#>, ElementName=Root}"/>

<#+ 
		rowNum++;
		}

		if (property.IsType<DateTime>() || property.IsType<DateTime?>())
		{
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Designation()#>" Visibility="{Binding Visibility<#=property.Name#><#=modelType.Name#>, ElementName=Root}"/>
        <DatePicker Grid.Column="1" Grid.Row="<#= rowNum #>" 
                    SelectedDate="{Binding Item.<#=property.Name#>, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
					Visibility="{Binding Visibility<#=property.Name#><#=modelType.Name#>, ElementName=Root}"/>

<#+ 
		rowNum++;
		}

		if (property.IsType<bool>() || property.IsType<bool?>())
		{
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Designation()#>" Visibility="{Binding Visibility<#=property.Name#><#=modelType.Name#>, ElementName=Root}"/>
        <CheckBox Grid.Column="1" Grid.Row="<#= rowNum #>" MinWidth="200" 
                  IsChecked="{Binding Item.<#=property.Name#>, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
				  Visibility="{Binding Visibility<#=property.Name#><#=modelType.Name#>, ElementName=Root}"/>

<#+ 
			rowNum++;
		}

		if (property.IsComplex())
		{
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Designation()#>" Visibility="{Binding Visibility<#=property.Name#><#=modelType.Name#>, ElementName=Root}"/>
        <controls:ChooseItemControl Grid.Column="1" Grid.Row="<#= rowNum #>" 
                                    Item="{Binding Item.<#=property.Name#>}" 
                                    AddItemCommand="{Binding Select<#=property.Name#>Command}" 
                                    RemoveItemCommand="{Binding Clear<#=property.Name#>Command}"
									Visibility="{Binding Visibility<#=property.Name#><#=modelType.Name#>, ElementName=Root}"/>

<#+ 
		rowNum++;
		}

		if (property.IsCollection())
		{
#>
        <Label Grid.Column="0" Grid.Row ="<#= rowNum #>" Content="<#=property.Designation()#>" Visibility="{Binding Visibility<#=property.Name#><#=modelType.Name#>, ElementName=Root}"/>
        <controls:ChooseItemsListControl Grid.Column="1" Grid.Row="<#= rowNum #>"
										 Items="{Binding Path=Item.<#=property.Name#>}"
										 SelectedItem="{Binding Selected<#=property.Name#>Item, Mode=TwoWay}"
										 AddItemCommand="{Binding AddIn<#=property.Name#>Command}"
										 RemoveItemCommand="{Binding RemoveFrom<#=property.Name#>Command}"
										 Visibility="{Binding Visibility<#=property.Name#><#=modelType.Name#>, ElementName=Root}"/>

<#+ 
		rowNum++;
		}

	  }

    //сохранение сгенерированного кода в отдельный файл.
    private void SaveGeneratedCodeAsFile(string fileName, string filePath)
    {
		string directoryName = Path.GetDirectoryName(Host.TemplateFile);
        string dir = Path.Combine(directoryName, filePath);
  
        string outputFilePath = Path.Combine(dir, fileName);
        File.WriteAllText(outputFilePath, GenerationEnvironment.ToString()); 
 
        GenerationEnvironment.Clear();
    }

#>