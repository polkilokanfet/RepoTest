<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\HVTApp.Model\bin\Debug\HVTApp.Model.dll" #>
<#@ assembly name="$(SolutionDir)\HVTApp.Infrestructure\bin\Debug\HVTApp.Infrastructure.dll" #>
<#@ assembly name="$(SolutionDir)\HVTApp.UI\bin\Debug\HVTApp.UI.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HVTApp.Model.POCOs" #>
<#@ import namespace="HVTApp.Infrastructure" #>
<#@ import namespace="HVTApp.UI.Lookup" #>
<#@ import namespace="HVTApp.UI" #>
<#@ output extension=".txt" #>
<#
    GenerateListViewModels(GeneratorHelpers.GetModelTypesPocos());
	SaveGeneratedCodeAsFile("ListViewModels.g.cs", "ViewModels/List/Generated");

	GenerateListViewsCs(GeneratorHelpers.GetModelTypesLookups());
	SaveGeneratedCodeAsFile("ListViews.g.cs", "Views/List/cs");

    GenerateListViewsXaml(GeneratorHelpers.GetModelTypesLookups());

#><#+
    private void GenerateListViewModels(IEnumerable<Type> modelTypes)
	{
#>using HVTApp.Model.POCOs;
using HVTApp.Model.Events;
using Microsoft.Practices.Unity;
using HVTApp.UI.Lookup;
using HVTApp.Infrastructure.Attributes;
using HVTApp.Infrastructure;

namespace HVTApp.UI.ViewModels
{
<#+
        foreach(var modelType in modelTypes)
        {
#>
	public partial class <#=modelType.Name#>LookupListViewModel : BaseListViewModel<<#=modelType.Name#>, <#=modelType.Name#>Lookup, AfterSave<#=modelType.Name#>Event, AfterSelect<#=modelType.Name#>Event, AfterRemove<#=modelType.Name#>Event>
    {
        public <#=modelType.Name#>LookupListViewModel(IUnityContainer container) : base(container) { }
    }

<#+
        }
#>
}
<#+
	}
	


	private void GenerateListViewsCs(IEnumerable<Type> modelTypes)
	{
#>using HVTApp.Infrastructure;
using HVTApp.Infrastructure.Attributes;
using System.Windows;
using Prism.Events;
using Prism.Regions;
using HVTApp.UI.Tabs;
using HVTApp.UI.ViewModels;
using HVTApp.Model.POCOs;


namespace HVTApp.UI.Views
{
<#+
        foreach(var modelType in modelTypes)
        {
#>
    [RibbonTab(typeof(TabCRUD)), RibbonTab(typeof(TabRefresh))]
	[Designation("<#=modelType.DesignationSingle()#>")]
	[DesignationPlural("<#=modelType.DesignationPlural()#>")]
	<#=modelType.GetAllowEdit()#>
    public partial class <#=modelType.Name#>ListView : ViewBase
    {
        public <#=modelType.Name#>ListView()
        {
            InitializeComponent();
        }

        public <#=modelType.Name#>ListView(IRegionManager regionManager, IEventAggregator eventAggregator, <#=modelType.Name#>ListViewModel <#=modelType.Name#>ListViewModel) : base(regionManager, eventAggregator)
        {
            InitializeComponent();
            DataContext = <#=modelType.Name#>ListViewModel;
			<#=modelType.Name#>ListViewModel.Loaded += () => { this.Loaded -= OnLoaded; };
            Loaded += OnLoaded;
        }
		        
        private void OnLoaded(object sender, RoutedEventArgs routedEventArgs)
        {
			((<#=modelType.Name#>ListViewModel)DataContext).Load();
        }

		#region VisibilityProps

<#+		var props = modelType.AllSimpleProperties().Where(x => x.Name != "Id").Union(modelType.AllComplexProperties()).Union(modelType.AllCollectionProperties());
		foreach(var prop in props)
        {
#>
        public System.Windows.Visibility <#=prop.Name#>Visibility
        {
            get { return <#=modelType.Name#>ListGrid.FieldLayouts[0].Fields[nameof(HVTApp.UI.Lookup.<#=modelType.Name#>.<#=prop.Name#>)].Visibility; }
            set { <#=modelType.Name#>ListGrid.FieldLayouts[0].Fields[nameof(HVTApp.UI.Lookup.<#=modelType.Name#>.<#=prop.Name#>)].Visibility = value; }
        }

<#+		}
#>

		#endregion
    }

<#+
        }
 #>
}
<#+
	}



    private void GenerateListViewsXaml(IEnumerable<Type> modelTypes)
    {
        foreach(var modelType in modelTypes)
        {
            GenerateView(modelType);
			SaveGeneratedCodeAsFile(modelType.Name + "ListView.xaml", "Views/List");
        }
    }


	private void GenerateView(Type modelType)
	{
#><inf:ViewBase xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
              xmlns:infg="http://infragistics.com/DataPresenter"
              xmlns:inf="clr-namespace:HVTApp.Infrastructure;assembly=HVTApp.Infrastructure"
              x:Class="HVTApp.UI.Views.<#=modelType.Name#>ListView">

    <Grid>
         <Grid.RowDefinitions>
             <RowDefinition Height="Auto"/>
             <RowDefinition Height="*"/>
         </Grid.RowDefinitions>
         
        <Label Grid.Row="0" Content="Ожидание данных..." VerticalAlignment="Center" HorizontalAlignment="Center">
            <Label.Style>
                <Style>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding ElementName=<#=modelType.Name#>ListGrid, Path=Visibility}" Value="Visible">
                        <Setter Property="Label.Visibility" Value="Collapsed"/>
                    </DataTrigger>
                </Style.Triggers>
                </Style>
            </Label.Style>
        </Label>
       

		<infg:XamDataGrid x:Name="<#=modelType.Name#>ListGrid" Grid.Row="1" Style="{StaticResource ListViewGrid}" Visibility="{Binding IsLoaded, Converter={StaticResource BooleanToVisibilityConverter}}">
        
			<infg:XamDataGrid.ContextMenu>
				<ContextMenu>
					<MenuItem Header="Export to Excel" Command="{Binding ExportToExcel}" CommandParameter="{Binding PlacementTarget, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}}"/>
				</ContextMenu>
			</infg:XamDataGrid.ContextMenu>

            <infg:XamDataGrid.InputBindings>
                <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding Path=SelectItemCommand, Mode=OneWay}"/>
            </infg:XamDataGrid.InputBindings>

			<infg:XamDataGrid.FieldLayouts>
				<infg:FieldLayout>
					<infg:FieldLayout.Fields>

<#+
		foreach(var prop in modelType.GetPropertiesForListViews())
        {
			GenerateField(prop);
		}
#>
					</infg:FieldLayout.Fields>
				</infg:FieldLayout>

			</infg:XamDataGrid.FieldLayouts>
		</infg:XamDataGrid>

    </Grid>
</inf:ViewBase>

	<#+
	}

	//генерация поля таблицы.
	private void GenerateField(PropertyInfo property)
  {
	string fieldName = string.Empty;
	string end = "";

	if (property.IsType<string>())
    {
		fieldName = "TextField";
		end = "";
	}

	if (property.IsType<Guid>())
    {
		fieldName = "TextField";
		end = "";
	}

	if (property.IsType<int>() || property.IsType<int?>() || property.IsType<double>() || property.IsType<double?>())
    {
		fieldName = "NumericField";
		end = "";
	}

	if (property.IsType<DateTime>() || property.IsType<DateTime?>())
    {
		fieldName = "DateTimeField";
		end = "";
	}

	if (property.IsType<bool>() || property.IsType<bool?>())
    {
		fieldName = "CheckBoxField";
		end = "";
	}

	if (property.IsComplex())
    {
		fieldName = "TextField";
		end = "Converter=\"{StaticResource LookupToStringConverter}\"";
	}

	if (property.IsCollection())
    {
		fieldName = "TextField";
		end = "Converter=\"{StaticResource LookupsToStringConverter}\"";
	}

	if(fieldName == string.Empty) return;

#>                        <infg:<#=fieldName#> Name="<#=property.Name#>" Label="<#=property.DesignationLookup()#>" Width="Auto" AllowResize="True" <#=end#>/>
<#+ 
  }

      //сохранение сгенерированного кода в отдельный файл.
    private void SaveGeneratedCodeAsFile(string fileName, string filePath)
    {
		string directoryName = Path.GetDirectoryName(Host.TemplateFile);
        string dir = Path.Combine(directoryName, filePath);
  
        string outputFilePath = Path.Combine(dir, fileName);
        File.WriteAllText(outputFilePath, GenerationEnvironment.ToString()); 
 
        GenerationEnvironment.Clear();
    }

#>