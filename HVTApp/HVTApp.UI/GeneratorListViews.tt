<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\HVTApp.Model\bin\Debug\HVTApp.Model.dll" #>
<#@ assembly name="$(SolutionDir)\HVTApp.Infrestructure\bin\Debug\HVTApp.Infrastructure.dll" #>
<#@ assembly name="$(SolutionDir)\HVTApp.UI\bin\Debug\HVTApp.UI.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HVTApp.Model.POCOs" #>
<#@ import namespace="HVTApp.Infrastructure" #>
<#@ import namespace="HVTApp.UI.Lookup" #>
<#@ import namespace="HVTApp.UI" #>
<#@ output extension=".txt" #>
<#
	GenerateLookups(GeneratorHelpers.GetModelTypesPocos());
	SaveGeneratedCodeAsFile("Lookups.g.cs", "Lookup/Items");

	GenerateLookupDataServiceInterfaces(GeneratorHelpers.GetModelTypesPocos());
	SaveGeneratedCodeAsFile("ILookupDataServices.g.cs", "Lookup/Service");

	GenerateLookupDataServices(GeneratorHelpers.GetModelTypesPocos());
	SaveGeneratedCodeAsFile("LookupDataServices.g.cs", "Lookup/Service");

    GenerateListViewModels(GeneratorHelpers.GetModelTypesPocos());
	SaveGeneratedCodeAsFile("ListViewModels.g.cs", "ViewModels/List/Generated");

	GenerateListViews(GeneratorHelpers.GetModelTypesPocos());
	SaveGeneratedCodeAsFile("ListViews.g.cs", "Views/List/cs");


    GenerateViews(GeneratorHelpers.GetModelTypesLookups());

#><#+
    private void GenerateLookups(IEnumerable<Type> modelTypes)
    {
#>using HVTApp.Model.POCOs;

namespace HVTApp.UI.Lookup
{
<#+
        foreach(var modelType in modelTypes)
        {
            GenerateLookup(modelType);
        }
#>}
<#+
    }

	private void GenerateLookup(Type modelType)
	{
#>
	public partial class <#=modelType.Name#>Lookup : LookupItem<<#=modelType.Name#>>
	{
		public <#=modelType.Name#>Lookup(<#=modelType.Name#> entity) : base(entity) 
		{
		}
		protected override void RefreshLookups()
        {
			 <#+ GenerateRefreshComplexLookupProperties(modelType.AllComplexProperties());#>
		}
		<#+

		GenerateSimpleLookupProperties(modelType.AllSimpleProperties().Where(x => x.Name != "Id"));
		GenerateComplexLookupProperties(modelType.AllComplexProperties());

		#>
	}
<#+
	}

  private void GenerateSimpleLookupProperties(IEnumerable<PropertyInfo> properties)
  {
  	if (!properties.Any())
		return;
#>

        #region SimpleProperties
<#+ 
    foreach (var property in properties)
    {
      var propertyType = property.PropertyType.GetTypeName();
      var propertyName = property.Name;
#>
        public <#=propertyType#> <#=propertyName#> => GetValue<<#=propertyType#>>();

<#+ 
    }
#>
        #endregion
<#+
  }

  private void GenerateComplexLookupProperties(IEnumerable<PropertyInfo> properties)
  {
  	if (!properties.Any())
		return;
#>

        #region ComplexProperties
<#+ 

    foreach (var property in properties)
    {
      var propertyType = property.PropertyType.Name;
      var propertyName = property.Name;
#>
	    public <#= propertyType #>Lookup <#= propertyName #> { get { return GetLookup<<#= propertyType #>Lookup>(); } }

<#+   
    }
#>
        #endregion
<#+
  }

  private void GenerateRefreshComplexLookupProperties(IEnumerable<PropertyInfo> properties)
  {
  	if (!properties.Any()) return;

    foreach (var property in properties)
    {
      var propertyType = property.PropertyType.Name;
      var propertyName = property.Name;
#>
			<#= propertyName #>?.Refresh(Entity.<#= propertyName #>);
<#+
    }
  }

    private void GenerateLookupDataServiceInterfaces(IEnumerable<Type> modelTypes)
    {
#>namespace HVTApp.UI.Lookup
{
<#+
        foreach(var modelType in modelTypes)
        {
            GenerateLookupDataServiceInterface(modelType);
        }
#>}
<#+
    }

	private void GenerateLookupDataServiceInterface(Type modelType)
	{
#>	public interface I<#=modelType.Name#>LookupDataService : ILookupDataService<<#=modelType.Name#>Lookup> { } 
<#+
	}


    private void GenerateLookupDataServices(IEnumerable<Type> modelTypes)
    {
#>using System;
using HVTApp.Infrastructure;
using HVTApp.Model.POCOs;

namespace HVTApp.UI.Lookup
{
<#+
        foreach(var modelType in modelTypes)
        {
            GenerateLookupDataService(modelType);
        }
#>}
<#+
    }

	private void GenerateLookupDataService(Type modelType)
	{
#>
    public partial class <#=modelType.Name#>LookupDataService : LookupDataService<<#=modelType.Name#>Lookup, <#=modelType.Name#>>, I<#=modelType.Name#>LookupDataService
    {
        public <#=modelType.Name#>LookupDataService(IUnitOfWork unitOfWork) : base(unitOfWork) { }
    }

<#+
	}


    private void GenerateListViewModels(IEnumerable<Type> modelTypes)
	{
#>using HVTApp.Model.POCOs;
using HVTApp.UI.Events;
using HVTApp.UI.Wrapper;
using Microsoft.Practices.Unity;
using HVTApp.UI.Lookup;

namespace HVTApp.UI.ViewModels
{
<#+
        foreach(var modelType in modelTypes)
        {
#>
    public partial class <#=modelType.Name#>ListViewModel : BaseListViewModel<<#=modelType.Name#>, <#=modelType.Name#>Lookup, AfterSave<#=modelType.Name#>Event, AfterSelect<#=modelType.Name#>Event, AfterRemove<#=modelType.Name#>Event,  <#=modelType.Name#>LookupDataService>
    {
        public <#=modelType.Name#>ListViewModel(IUnityContainer container) : base(container) { }
    }

<#+
        }
#>
}
<#+
	}
	


	private void GenerateListViews(IEnumerable<Type> modelTypes)
	{
#>using HVTApp.Infrastructure;
using HVTApp.Infrastructure.Attrubutes;
using System.Windows;
using Prism.Events;
using Prism.Regions;
using HVTApp.UI.Tabs;
using HVTApp.UI.ViewModels;

namespace HVTApp.UI.Views
{
<#+
        foreach(var modelType in modelTypes)
        {
 #>
    [RibbonTab(typeof(TabCRUD))]
	[DesignationPlural("<#=modelType.DesignationPlural()#>")]
    public partial class <#=modelType.Name#>LookupListView : ViewBase
    {
        public <#=modelType.Name#>LookupListView()
        {
            InitializeComponent();
        }

        public <#=modelType.Name#>LookupListView(IRegionManager regionManager, IEventAggregator eventAggregator, <#=modelType.Name#>ListViewModel <#=modelType.Name#>ListViewModel) : base(regionManager, eventAggregator)
        {
            InitializeComponent();
            DataContext = <#=modelType.Name#>ListViewModel;
			<#=modelType.Name#>ListViewModel.Loaded += () => { this.Loaded -= OnLoaded; };
            Loaded += OnLoaded;
        }
		        
        private async void OnLoaded(object sender, RoutedEventArgs routedEventArgs)
        {
			await ((<#=modelType.Name#>ListViewModel)DataContext).LoadAsync();;
        }
    }

<#+
        }
 #>
}
<#+
	}



    private void GenerateViews(IEnumerable<Type> modelTypes)
    {
        foreach(var modelType in modelTypes)
        {
            GenerateView(modelType);
			SaveGeneratedCodeAsFile(modelType.Name + "ListView.xaml", "Views/List");
        }
    }


	private void GenerateView(Type modelType)
	{
#><inf:ViewBase xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
              xmlns:infg="http://infragistics.com/DataPresenter"
              xmlns:inf="clr-namespace:HVTApp.Infrastructure;assembly=HVTApp.Infrastructure"
              x:Class="HVTApp.UI.Views.<#=modelType.Name#>ListView">

    <infg:XamDataGrid x:Name="<#=modelType.Name#>ListGrid">
        
        <infg:XamDataGrid.ContextMenu>
            <ContextMenu>
                <MenuItem Header="Export to Excel" Command="{Binding ExportToExcel}" CommandParameter="{Binding PlacementTarget, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}}"/>
            </ContextMenu>
        </infg:XamDataGrid.ContextMenu>

        <infg:XamDataGrid.FieldLayouts>
            <infg:FieldLayout>
                <infg:FieldLayout.Fields>
<#+
		GenerateFields(modelType.GetPropertiesForListViews().StringProperties(), "TextField");
		GenerateFields(modelType.GetPropertiesForListViews().DigitProperties() , "NumericField");
		GenerateFields(modelType.GetPropertiesForListViews().SimpleProperties<DateTime>(), "DateTimeField");
		GenerateFields(modelType.GetPropertiesForListViews().SimpleProperties<bool>(), "CheckBoxField");
		GenerateFields(modelType.GetPropertiesForListViews().AllComplexProperties(), "TextField", "Converter=\"{StaticResource LookupToStringConverter}\"");
		//GenerateCollectionComplexProperties(collectionComplexProperties);
	#>
                </infg:FieldLayout.Fields>
            </infg:FieldLayout>

        </infg:XamDataGrid.FieldLayouts>
    </infg:XamDataGrid>

</inf:ViewBase>

	<#+
	}

  //генерация полей таблицы.
  private void GenerateFields(IEnumerable<PropertyInfo> properties, string fieldName, string end = "")
  {
    foreach (var property in properties)
    {
#>                    <infg:<#=fieldName#> Name="<#=property.Name#>" Label="<#=property.DesignationLookup()#>" Width="Auto" <#=end#>/>
<#+ 
    }
  }

      //сохранение сгенерированного кода в отдельный файл.
    private void SaveGeneratedCodeAsFile(string fileName, string filePath)
    {
		string directoryName = Path.GetDirectoryName(Host.TemplateFile);
        string dir = Path.Combine(directoryName, filePath);
  
        string outputFilePath = Path.Combine(dir, fileName);
        File.WriteAllText(outputFilePath, GenerationEnvironment.ToString()); 
 
        GenerationEnvironment.Clear();
    }

#>