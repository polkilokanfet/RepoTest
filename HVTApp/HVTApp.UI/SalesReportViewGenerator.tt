<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\HVTApp.UI\bin\Debug\HVTApp.UI.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HVTApp.UI" #>
<#@ import namespace="HVTApp.UI.Modules.Reports.ViewModels" #>
<#@ output extension=".txt" #>
<#

    GenerateView(typeof(HVTApp.UI.Modules.Reports.ViewModels.SalesReportUnit));

#><#+

	private void GenerateView(Type modelType)
	{
#><inf:ViewBase xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
              xmlns:infg="http://infragistics.com/DataPresenter"
              xmlns:inf="clr-namespace:HVTApp.Infrastructure;assembly=HVTApp.Infrastructure"
              x:Class="HVTApp.UI.Views.<#=modelType.Name#>ListView">

    <Grid>
         <Grid.RowDefinitions>
             <RowDefinition Height="Auto"/>
             <RowDefinition Height="*"/>
         </Grid.RowDefinitions>
         
        <Label Grid.Row="0" Content="Ожидание данных..." VerticalAlignment="Center" HorizontalAlignment="Center">
            <Label.Style>
                <Style>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding ElementName=<#=modelType.Name#>ListGrid, Path=Visibility}" Value="Visible">
                        <Setter Property="Label.Visibility" Value="Collapsed"/>
                    </DataTrigger>
                </Style.Triggers>
                </Style>
            </Label.Style>
        </Label>
       

		<infg:XamDataGrid x:Name="<#=modelType.Name#>ListGrid" Grid.Row="1" Style="{StaticResource ListViewGrid}" Visibility="{Binding IsLoaded, Converter={StaticResource BooleanToVisibilityConverter}}">
        
			<infg:XamDataGrid.ContextMenu>
				<ContextMenu>
					<MenuItem Header="Export to Excel" Command="{Binding ExportToExcel}" CommandParameter="{Binding PlacementTarget, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}}"/>
				</ContextMenu>
			</infg:XamDataGrid.ContextMenu>

			<infg:XamDataGrid.FieldLayouts>
				<infg:FieldLayout>
					<infg:FieldLayout.Fields>
<#+
		foreach(var prop in modelType.GetPropertiesForSalesUnitReport())
        {
			GenerateField(prop);
		}
#>
					</infg:FieldLayout.Fields>
				</infg:FieldLayout>

			</infg:XamDataGrid.FieldLayouts>
		</infg:XamDataGrid>

    </Grid>
</inf:ViewBase>

	<#+
	}

	//генерация поля таблицы.
	private void GenerateField(PropertyInfo property)
  {
	string fieldName = string.Empty;
	string end = "";

	if (property.IsType<string>())
    {
		fieldName = "TextField";
		end = "";
	}

	if (property.IsType<int>() || property.IsType<int?>() || property.IsType<double>() || property.IsType<double?>())
    {
		fieldName = "NumericField";
		end = "";
	}

	if (property.IsType<DateTime>() || property.IsType<DateTime?>())
    {
		fieldName = "DateTimeField";
		end = "";
	}

	if (property.IsType<bool>() || property.IsType<bool?>())
    {
		fieldName = "CheckBoxField";
		end = "";
	}

	if (property.IsComplex())
    {
		fieldName = "TextField";
		end = "";
	}

	if (property.IsCollection())
    {
		fieldName = "TextField";
		end = "Converter=\"{StaticResource ObjectsToStringConverter}\"";
	}

	if(fieldName == string.Empty) return;

#>                        <infg:<#= fieldName #> AlternateBinding="{Binding <#=property.Name#>}" BindingType="UseAlternateBinding" Label="<#=property.Designation()#>" Width="Auto" AllowResize="True" <#= end #>/>
<#+ 
  }
#>