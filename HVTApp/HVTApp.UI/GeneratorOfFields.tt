<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\HVTApp.Model\bin\Debug\HVTApp.Model.dll" #>
<#@ assembly name="$(SolutionDir)\HVTApp.Infrestructure\bin\Debug\HVTApp.Infrastructure.dll" #>
<#@ assembly name="$(SolutionDir)\HVTApp.UI\bin\Debug\HVTApp.UI.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HVTApp.Model.POCOs" #>
<#@ import namespace="HVTApp.Infrastructure" #>
<#@ import namespace="HVTApp.UI.Lookup" #>
<#@ import namespace="HVTApp.UI" #>
<#@ output extension=".txt" #>
<#
	var modelTypes = GeneratorHelpers.GetModelTypesLookups();

    GenerateViews(modelTypes);

#><#+

    private void GenerateViews(IEnumerable<Type> modelTypes)
    {
        foreach(var modelType in modelTypes)
        {
            GenerateView(modelType);
			SaveGeneratedCodeAsFile(modelType.Name + "ListView.xaml", "Views/List");
        }
    }


	private void GenerateView(Type modelType)
	{
#><inf:ViewBase xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
              xmlns:infg="http://infragistics.com/DataPresenter"
              xmlns:inf="clr-namespace:HVTApp.Infrastructure;assembly=HVTApp.Infrastructure"
              x:Class="HVTApp.UI.Views.<#=modelType.Name#>ListView">

    <infg:XamDataGrid x:Name="<#=modelType.Name#>ListGrid">
        
        <infg:XamDataGrid.ContextMenu>
            <ContextMenu>
                <MenuItem Header="Export to Excel" Command="{Binding ExportToExcel}" CommandParameter="{Binding PlacementTarget, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}}"/>
            </ContextMenu>
        </infg:XamDataGrid.ContextMenu>

        <infg:XamDataGrid.FieldLayouts>
            <infg:FieldLayout>
                <infg:FieldLayout.Fields>
<#+
		GenerateFields(modelType.StringProperties(), "TextField");
		GenerateFields(modelType.DigitProperties() , "NumericField");
		GenerateFields(modelType.SimpleProperties<DateTime>(), "DateTimeField");
		GenerateFields(modelType.SimpleProperties<bool>(), "CheckBoxField");
		GenerateFields(modelType.AllComplexProperties(), "TextField", "Converter=\"{StaticResource LookupToStringConverter}\"");
		//GenerateCollectionComplexProperties(collectionComplexProperties);
	#>
                </infg:FieldLayout.Fields>
            </infg:FieldLayout>

        </infg:XamDataGrid.FieldLayouts>
    </infg:XamDataGrid>

</inf:ViewBase>

	<#+
	}

  //генерация полей таблицы.
  private void GenerateFields(IEnumerable<PropertyInfo> properties, string fieldName, string end = "")
  {
    foreach (var property in properties)
    {
#>                    <infg:<#=fieldName#> Name="<#=property.Name#>" Label="<#=property.DesignationLookup()#>" Width="Auto" <#=end#>/>
<#+ 
    }
  }

      //сохранение сгенерированного кода в отдельный файл.
    private void SaveGeneratedCodeAsFile(string fileName, string filePath)
    {
		string directoryName = Path.GetDirectoryName(Host.TemplateFile);
        string dir = Path.Combine(directoryName, filePath);
  
        string outputFilePath = Path.Combine(dir, fileName);
        File.WriteAllText(outputFilePath, GenerationEnvironment.ToString()); 
 
        GenerationEnvironment.Clear();
    }

#>