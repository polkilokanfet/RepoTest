//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventServiceClient2.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IEventService", CallbackContract=typeof(EventServiceClient2.ServiceReference1.IEventServiceCallback))]
    public interface IEventService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Connect", ReplyAction="http://tempuri.org/IEventService/ConnectResponse")]
        bool Connect(System.Guid appSessionId, System.Guid userId, HVTApp.Infrastructure.Role userRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Connect", ReplyAction="http://tempuri.org/IEventService/ConnectResponse")]
        System.Threading.Tasks.Task<bool> ConnectAsync(System.Guid appSessionId, System.Guid userId, HVTApp.Infrastructure.Role userRole);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Disconnect", ReplyAction="http://tempuri.org/IEventService/DisconnectResponse")]
        void Disconnect(System.Guid appSessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Disconnect", ReplyAction="http://tempuri.org/IEventService/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(System.Guid appSessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/HostIsAlive", ReplyAction="http://tempuri.org/IEventService/HostIsAliveResponse")]
        bool HostIsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/HostIsAlive", ReplyAction="http://tempuri.org/IEventService/HostIsAliveResponse")]
        System.Threading.Tasks.Task<bool> HostIsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UserIsConnected", ReplyAction="http://tempuri.org/IEventService/UserIsConnectedResponse")]
        bool UserIsConnected(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UserIsConnected", ReplyAction="http://tempuri.org/IEventService/UserIsConnectedResponse")]
        System.Threading.Tasks.Task<bool> UserIsConnectedAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/SendMessageToChat", ReplyAction="http://tempuri.org/IEventService/SendMessageToChatResponse")]
        void SendMessageToChat(System.Guid authorId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/SendMessageToChat", ReplyAction="http://tempuri.org/IEventService/SendMessageToChatResponse")]
        System.Threading.Tasks.Task SendMessageToChatAsync(System.Guid authorId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/SendMessageToUser", ReplyAction="http://tempuri.org/IEventService/SendMessageToUserResponse")]
        void SendMessageToUser(System.Guid authorId, System.Guid recipientId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/SendMessageToUser", ReplyAction="http://tempuri.org/IEventService/SendMessageToUserResponse")]
        System.Threading.Tasks.Task SendMessageToUserAsync(System.Guid authorId, System.Guid recipientId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/NotificationEvent", ReplyAction="http://tempuri.org/IEventService/NotificationEventResponse")]
        bool NotificationEvent(System.Guid eventSourceAppSessionId, System.Guid userAuthorId, System.Guid userTargetId, HVTApp.Infrastructure.Role userTargetRole, System.Guid priceEngineeringTaskId, HVTApp.Infrastructure.Enums.NotificationActionType actionType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/NotificationEvent", ReplyAction="http://tempuri.org/IEventService/NotificationEventResponse")]
        System.Threading.Tasks.Task<bool> NotificationEventAsync(System.Guid eventSourceAppSessionId, System.Guid userAuthorId, System.Guid userTargetId, HVTApp.Infrastructure.Role userTargetRole, System.Guid priceEngineeringTaskId, HVTApp.Infrastructure.Enums.NotificationActionType actionType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/PriceEngineeringTaskSendMessagePublishEvent", ReplyAction="http://tempuri.org/IEventService/PriceEngineeringTaskSendMessagePublishEventRespo" +
            "nse")]
        bool PriceEngineeringTaskSendMessagePublishEvent(System.Guid eventSourceAppSessionId, System.Guid targetUserId, HVTApp.Infrastructure.Role targetRole, System.Guid messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/PriceEngineeringTaskSendMessagePublishEvent", ReplyAction="http://tempuri.org/IEventService/PriceEngineeringTaskSendMessagePublishEventRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> PriceEngineeringTaskSendMessagePublishEventAsync(System.Guid eventSourceAppSessionId, System.Guid targetUserId, HVTApp.Infrastructure.Role targetRole, System.Guid messageId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/ApplicationShutdown")]
        void ApplicationShutdown();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnServiceDisposeEvent")]
        void OnServiceDisposeEvent();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnSendMessageToChat")]
        void OnSendMessageToChat(System.Guid authorId, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnSendMessageToUser")]
        void OnSendMessageToUser(System.Guid authorId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/OnNotificationCallback", ReplyAction="http://tempuri.org/IEventService/OnNotificationCallbackResponse")]
        bool OnNotificationCallback(HVTApp.Infrastructure.Enums.NotificationActionType actionType, System.Guid targetEntityId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/OnPriceEngineeringTaskSendMessageServiceCallback" +
            "", ReplyAction="http://tempuri.org/IEventService/OnPriceEngineeringTaskSendMessageServiceCallback" +
            "Response")]
        bool OnPriceEngineeringTaskSendMessageServiceCallback(System.Guid messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/IsAlive", ReplyAction="http://tempuri.org/IEventService/IsAliveResponse")]
        bool IsAlive();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventServiceChannel : EventServiceClient2.ServiceReference1.IEventService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventServiceClient : System.ServiceModel.DuplexClientBase<EventServiceClient2.ServiceReference1.IEventService>, EventServiceClient2.ServiceReference1.IEventService {
        
        public EventServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public EventServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public EventServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Connect(System.Guid appSessionId, System.Guid userId, HVTApp.Infrastructure.Role userRole) {
            return base.Channel.Connect(appSessionId, userId, userRole);
        }
        
        public System.Threading.Tasks.Task<bool> ConnectAsync(System.Guid appSessionId, System.Guid userId, HVTApp.Infrastructure.Role userRole) {
            return base.Channel.ConnectAsync(appSessionId, userId, userRole);
        }
        
        public void Disconnect(System.Guid appSessionId) {
            base.Channel.Disconnect(appSessionId);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(System.Guid appSessionId) {
            return base.Channel.DisconnectAsync(appSessionId);
        }
        
        public bool HostIsAlive() {
            return base.Channel.HostIsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> HostIsAliveAsync() {
            return base.Channel.HostIsAliveAsync();
        }
        
        public bool UserIsConnected(System.Guid userId) {
            return base.Channel.UserIsConnected(userId);
        }
        
        public System.Threading.Tasks.Task<bool> UserIsConnectedAsync(System.Guid userId) {
            return base.Channel.UserIsConnectedAsync(userId);
        }
        
        public void SendMessageToChat(System.Guid authorId, string message) {
            base.Channel.SendMessageToChat(authorId, message);
        }
        
        public System.Threading.Tasks.Task SendMessageToChatAsync(System.Guid authorId, string message) {
            return base.Channel.SendMessageToChatAsync(authorId, message);
        }
        
        public void SendMessageToUser(System.Guid authorId, System.Guid recipientId, string message) {
            base.Channel.SendMessageToUser(authorId, recipientId, message);
        }
        
        public System.Threading.Tasks.Task SendMessageToUserAsync(System.Guid authorId, System.Guid recipientId, string message) {
            return base.Channel.SendMessageToUserAsync(authorId, recipientId, message);
        }
        
        public bool NotificationEvent(System.Guid eventSourceAppSessionId, System.Guid userAuthorId, System.Guid userTargetId, HVTApp.Infrastructure.Role userTargetRole, System.Guid priceEngineeringTaskId, HVTApp.Infrastructure.Enums.NotificationActionType actionType) {
            return base.Channel.NotificationEvent(eventSourceAppSessionId, userAuthorId, userTargetId, userTargetRole, priceEngineeringTaskId, actionType);
        }
        
        public System.Threading.Tasks.Task<bool> NotificationEventAsync(System.Guid eventSourceAppSessionId, System.Guid userAuthorId, System.Guid userTargetId, HVTApp.Infrastructure.Role userTargetRole, System.Guid priceEngineeringTaskId, HVTApp.Infrastructure.Enums.NotificationActionType actionType) {
            return base.Channel.NotificationEventAsync(eventSourceAppSessionId, userAuthorId, userTargetId, userTargetRole, priceEngineeringTaskId, actionType);
        }
        
        public bool PriceEngineeringTaskSendMessagePublishEvent(System.Guid eventSourceAppSessionId, System.Guid targetUserId, HVTApp.Infrastructure.Role targetRole, System.Guid messageId) {
            return base.Channel.PriceEngineeringTaskSendMessagePublishEvent(eventSourceAppSessionId, targetUserId, targetRole, messageId);
        }
        
        public System.Threading.Tasks.Task<bool> PriceEngineeringTaskSendMessagePublishEventAsync(System.Guid eventSourceAppSessionId, System.Guid targetUserId, HVTApp.Infrastructure.Role targetRole, System.Guid messageId) {
            return base.Channel.PriceEngineeringTaskSendMessagePublishEventAsync(eventSourceAppSessionId, targetUserId, targetRole, messageId);
        }
    }
}
