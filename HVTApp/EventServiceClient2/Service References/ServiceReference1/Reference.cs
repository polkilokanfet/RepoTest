//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventServiceClient2.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IEventService", CallbackContract=typeof(EventServiceClient2.ServiceReference1.IEventServiceCallback))]
    public interface IEventService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Connect", ReplyAction="http://tempuri.org/IEventService/ConnectResponse")]
        bool Connect(System.Guid appSessionId, System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Connect", ReplyAction="http://tempuri.org/IEventService/ConnectResponse")]
        System.Threading.Tasks.Task<bool> ConnectAsync(System.Guid appSessionId, System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Disconnect", ReplyAction="http://tempuri.org/IEventService/DisconnectResponse")]
        void Disconnect(System.Guid appSessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Disconnect", ReplyAction="http://tempuri.org/IEventService/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(System.Guid appSessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/HostIsAlive", ReplyAction="http://tempuri.org/IEventService/HostIsAliveResponse")]
        bool HostIsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/HostIsAlive", ReplyAction="http://tempuri.org/IEventService/HostIsAliveResponse")]
        System.Threading.Tasks.Task<bool> HostIsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UserIsConnected", ReplyAction="http://tempuri.org/IEventService/UserIsConnectedResponse")]
        bool UserIsConnected(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/UserIsConnected", ReplyAction="http://tempuri.org/IEventService/UserIsConnectedResponse")]
        System.Threading.Tasks.Task<bool> UserIsConnectedAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/CopyProjectAttachments", ReplyAction="http://tempuri.org/IEventService/CopyProjectAttachmentsResponse")]
        bool CopyProjectAttachments(System.Guid userId, System.Guid projectId, string targetDirectory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/CopyProjectAttachments", ReplyAction="http://tempuri.org/IEventService/CopyProjectAttachmentsResponse")]
        System.Threading.Tasks.Task<bool> CopyProjectAttachmentsAsync(System.Guid userId, System.Guid projectId, string targetDirectory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/SendMessageToChat", ReplyAction="http://tempuri.org/IEventService/SendMessageToChatResponse")]
        void SendMessageToChat(System.Guid authorId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/SendMessageToChat", ReplyAction="http://tempuri.org/IEventService/SendMessageToChatResponse")]
        System.Threading.Tasks.Task SendMessageToChatAsync(System.Guid authorId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/SendMessageToUser", ReplyAction="http://tempuri.org/IEventService/SendMessageToUserResponse")]
        void SendMessageToUser(System.Guid authorId, System.Guid recipientId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/SendMessageToUser", ReplyAction="http://tempuri.org/IEventService/SendMessageToUserResponse")]
        System.Threading.Tasks.Task SendMessageToUserAsync(System.Guid authorId, System.Guid recipientId, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/SaveDirectumTaskPublishEvent")]
        void SaveDirectumTaskPublishEvent(System.Guid appSessionId, System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/SaveDirectumTaskPublishEvent")]
        System.Threading.Tasks.Task SaveDirectumTaskPublishEventAsync(System.Guid appSessionId, System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/StartDirectumTaskPublishEvent")]
        void StartDirectumTaskPublishEvent(System.Guid appSessionId, System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/StartDirectumTaskPublishEvent")]
        System.Threading.Tasks.Task StartDirectumTaskPublishEventAsync(System.Guid appSessionId, System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/StopDirectumTaskPublishEvent")]
        void StopDirectumTaskPublishEvent(System.Guid appSessionId, System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/StopDirectumTaskPublishEvent")]
        System.Threading.Tasks.Task StopDirectumTaskPublishEventAsync(System.Guid appSessionId, System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/PerformDirectumTaskPublishEvent")]
        void PerformDirectumTaskPublishEvent(System.Guid appSessionId, System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/PerformDirectumTaskPublishEvent")]
        System.Threading.Tasks.Task PerformDirectumTaskPublishEventAsync(System.Guid appSessionId, System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/AcceptDirectumTaskPublishEvent")]
        void AcceptDirectumTaskPublishEvent(System.Guid appSessionId, System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/AcceptDirectumTaskPublishEvent")]
        System.Threading.Tasks.Task AcceptDirectumTaskPublishEventAsync(System.Guid appSessionId, System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/RejectDirectumTaskPublishEvent")]
        void RejectDirectumTaskPublishEvent(System.Guid appSessionId, System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/RejectDirectumTaskPublishEvent")]
        System.Threading.Tasks.Task RejectDirectumTaskPublishEventAsync(System.Guid appSessionId, System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/SavePriceCalculationPublishEvent")]
        void SavePriceCalculationPublishEvent(System.Guid appSessionId, System.Guid priceCalculationId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/SavePriceCalculationPublishEvent")]
        System.Threading.Tasks.Task SavePriceCalculationPublishEventAsync(System.Guid appSessionId, System.Guid priceCalculationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/StartPriceCalculationPublishEvent", ReplyAction="http://tempuri.org/IEventService/StartPriceCalculationPublishEventResponse")]
        System.Guid[] StartPriceCalculationPublishEvent(System.Guid appSessionId, System.Guid priceCalculationId, System.Guid[] targetUsersIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/StartPriceCalculationPublishEvent", ReplyAction="http://tempuri.org/IEventService/StartPriceCalculationPublishEventResponse")]
        System.Threading.Tasks.Task<System.Guid[]> StartPriceCalculationPublishEventAsync(System.Guid appSessionId, System.Guid priceCalculationId, System.Guid[] targetUsersIds);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/FinishPriceCalculationPublishEvent")]
        void FinishPriceCalculationPublishEvent(System.Guid appSessionId, System.Guid priceCalculationId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/FinishPriceCalculationPublishEvent")]
        System.Threading.Tasks.Task FinishPriceCalculationPublishEventAsync(System.Guid appSessionId, System.Guid priceCalculationId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/CancelPriceCalculationPublishEvent")]
        void CancelPriceCalculationPublishEvent(System.Guid appSessionId, System.Guid priceCalculationId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/CancelPriceCalculationPublishEvent")]
        System.Threading.Tasks.Task CancelPriceCalculationPublishEventAsync(System.Guid appSessionId, System.Guid priceCalculationId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/RejectPriceCalculationPublishEvent")]
        void RejectPriceCalculationPublishEvent(System.Guid appSessionId, System.Guid priceCalculationId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/RejectPriceCalculationPublishEvent")]
        System.Threading.Tasks.Task RejectPriceCalculationPublishEventAsync(System.Guid appSessionId, System.Guid priceCalculationId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/SaveIncomingRequestPublishEvent")]
        void SaveIncomingRequestPublishEvent(System.Guid appSessionId, System.Guid requestId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/SaveIncomingRequestPublishEvent")]
        System.Threading.Tasks.Task SaveIncomingRequestPublishEventAsync(System.Guid appSessionId, System.Guid requestId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/SaveIncomingDocumentPublishEvent")]
        void SaveIncomingDocumentPublishEvent(System.Guid appSessionId, System.Guid documentId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/SaveIncomingDocumentPublishEvent")]
        System.Threading.Tasks.Task SaveIncomingDocumentPublishEventAsync(System.Guid appSessionId, System.Guid documentId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/SaveTechnicalRequarementsTaskPublishEvent")]
        void SaveTechnicalRequarementsTaskPublishEvent(System.Guid appSessionId, System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/SaveTechnicalRequarementsTaskPublishEvent")]
        System.Threading.Tasks.Task SaveTechnicalRequarementsTaskPublishEventAsync(System.Guid appSessionId, System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/StartTechnicalRequarementsTaskPublishEvent")]
        void StartTechnicalRequarementsTaskPublishEvent(System.Guid appSessionId, System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/StartTechnicalRequarementsTaskPublishEvent")]
        System.Threading.Tasks.Task StartTechnicalRequarementsTaskPublishEventAsync(System.Guid appSessionId, System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/InstructTechnicalRequarementsTaskPublishEvent")]
        void InstructTechnicalRequarementsTaskPublishEvent(System.Guid appSessionId, System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/InstructTechnicalRequarementsTaskPublishEvent")]
        System.Threading.Tasks.Task InstructTechnicalRequarementsTaskPublishEventAsync(System.Guid appSessionId, System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/StopTechnicalRequarementsTaskPublishEvent")]
        void StopTechnicalRequarementsTaskPublishEvent(System.Guid appSessionId, System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/StopTechnicalRequarementsTaskPublishEvent")]
        System.Threading.Tasks.Task StopTechnicalRequarementsTaskPublishEventAsync(System.Guid appSessionId, System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/RejectTechnicalRequarementsTaskPublishEvent")]
        void RejectTechnicalRequarementsTaskPublishEvent(System.Guid appSessionId, System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/RejectTechnicalRequarementsTaskPublishEvent")]
        System.Threading.Tasks.Task RejectTechnicalRequarementsTaskPublishEventAsync(System.Guid appSessionId, System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/RejectByFrontManagerTechnicalRequarementsTaskPub" +
            "lishEvent")]
        void RejectByFrontManagerTechnicalRequarementsTaskPublishEvent(System.Guid appSessionId, System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/RejectByFrontManagerTechnicalRequarementsTaskPub" +
            "lishEvent")]
        System.Threading.Tasks.Task RejectByFrontManagerTechnicalRequarementsTaskPublishEventAsync(System.Guid appSessionId, System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/FinishTechnicalRequarementsTaskPublishEvent")]
        void FinishTechnicalRequarementsTaskPublishEvent(System.Guid appSessionId, System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/FinishTechnicalRequarementsTaskPublishEvent")]
        System.Threading.Tasks.Task FinishTechnicalRequarementsTaskPublishEventAsync(System.Guid appSessionId, System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/AcceptTechnicalRequarementsTaskPublishEvent")]
        void AcceptTechnicalRequarementsTaskPublishEvent(System.Guid appSessionId, System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/AcceptTechnicalRequarementsTaskPublishEvent")]
        System.Threading.Tasks.Task AcceptTechnicalRequarementsTaskPublishEventAsync(System.Guid appSessionId, System.Guid technicalRequarementsTaskId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnServiceDisposeEvent")]
        void OnServiceDisposeEvent();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/CopyProjectAttachmentsCallback")]
        void CopyProjectAttachmentsCallback(System.Guid projectId, string targetDirectory);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnSendMessageToChat")]
        void OnSendMessageToChat(System.Guid authorId, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnSendMessageToUser")]
        void OnSendMessageToUser(System.Guid authorId, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnSaveDirectumTaskServiceCallback")]
        void OnSaveDirectumTaskServiceCallback(System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnStartDirectumTaskServiceCallback")]
        void OnStartDirectumTaskServiceCallback(System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnStopDirectumTaskServiceCallback")]
        void OnStopDirectumTaskServiceCallback(System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnPerformDirectumTaskServiceCallback")]
        void OnPerformDirectumTaskServiceCallback(System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnAcceptDirectumTaskServiceCallback")]
        void OnAcceptDirectumTaskServiceCallback(System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnRejectDirectumTaskServiceCallback")]
        void OnRejectDirectumTaskServiceCallback(System.Guid taskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnSavePriceCalculationServiceCallback")]
        void OnSavePriceCalculationServiceCallback(System.Guid calculationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/OnStartPriceCalculationServiceCallback", ReplyAction="http://tempuri.org/IEventService/OnStartPriceCalculationServiceCallbackResponse")]
        bool OnStartPriceCalculationServiceCallback(System.Guid calculationId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnFinishPriceCalculationServiceCallback")]
        void OnFinishPriceCalculationServiceCallback(System.Guid calculationId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnCancelPriceCalculationServiceCallback")]
        void OnCancelPriceCalculationServiceCallback(System.Guid calculationId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnRejectPriceCalculationServiceCallback")]
        void OnRejectPriceCalculationServiceCallback(System.Guid calculationId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnSaveIncomingRequestServiceCallback")]
        void OnSaveIncomingRequestServiceCallback(System.Guid requestId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnSaveIncomingDocumentServiceCallback")]
        void OnSaveIncomingDocumentServiceCallback(System.Guid documentId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnSaveTechnicalRequarementsTaskServiceCallback")]
        void OnSaveTechnicalRequarementsTaskServiceCallback(System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnStartTechnicalRequarementsTaskServiceCallback")]
        void OnStartTechnicalRequarementsTaskServiceCallback(System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnInstructTechnicalRequarementsTaskServiceCallba" +
            "ck")]
        void OnInstructTechnicalRequarementsTaskServiceCallback(System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnStopTechnicalRequarementsTaskServiceCallback")]
        void OnStopTechnicalRequarementsTaskServiceCallback(System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnRejectTechnicalRequarementsTaskServiceCallback" +
            "")]
        void OnRejectTechnicalRequarementsTaskServiceCallback(System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnRejectByFrontManagerTechnicalRequarementsTaskS" +
            "erviceCallback")]
        void OnRejectByFrontManagerTechnicalRequarementsTaskServiceCallback(System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnFinishTechnicalRequarementsTaskServiceCallback" +
            "")]
        void OnFinishTechnicalRequarementsTaskServiceCallback(System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IEventService/OnAcceptTechnicalRequarementsTaskServiceCallback" +
            "")]
        void OnAcceptTechnicalRequarementsTaskServiceCallback(System.Guid technicalRequarementsTaskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/IsAlive", ReplyAction="http://tempuri.org/IEventService/IsAliveResponse")]
        bool IsAlive();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventServiceChannel : EventServiceClient2.ServiceReference1.IEventService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventServiceClient : System.ServiceModel.DuplexClientBase<EventServiceClient2.ServiceReference1.IEventService>, EventServiceClient2.ServiceReference1.IEventService {
        
        public EventServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public EventServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public EventServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Connect(System.Guid appSessionId, System.Guid userId) {
            return base.Channel.Connect(appSessionId, userId);
        }
        
        public System.Threading.Tasks.Task<bool> ConnectAsync(System.Guid appSessionId, System.Guid userId) {
            return base.Channel.ConnectAsync(appSessionId, userId);
        }
        
        public void Disconnect(System.Guid appSessionId) {
            base.Channel.Disconnect(appSessionId);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(System.Guid appSessionId) {
            return base.Channel.DisconnectAsync(appSessionId);
        }
        
        public bool HostIsAlive() {
            return base.Channel.HostIsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> HostIsAliveAsync() {
            return base.Channel.HostIsAliveAsync();
        }
        
        public bool UserIsConnected(System.Guid userId) {
            return base.Channel.UserIsConnected(userId);
        }
        
        public System.Threading.Tasks.Task<bool> UserIsConnectedAsync(System.Guid userId) {
            return base.Channel.UserIsConnectedAsync(userId);
        }
        
        public bool CopyProjectAttachments(System.Guid userId, System.Guid projectId, string targetDirectory) {
            return base.Channel.CopyProjectAttachments(userId, projectId, targetDirectory);
        }
        
        public System.Threading.Tasks.Task<bool> CopyProjectAttachmentsAsync(System.Guid userId, System.Guid projectId, string targetDirectory) {
            return base.Channel.CopyProjectAttachmentsAsync(userId, projectId, targetDirectory);
        }
        
        public void SendMessageToChat(System.Guid authorId, string message) {
            base.Channel.SendMessageToChat(authorId, message);
        }
        
        public System.Threading.Tasks.Task SendMessageToChatAsync(System.Guid authorId, string message) {
            return base.Channel.SendMessageToChatAsync(authorId, message);
        }
        
        public void SendMessageToUser(System.Guid authorId, System.Guid recipientId, string message) {
            base.Channel.SendMessageToUser(authorId, recipientId, message);
        }
        
        public System.Threading.Tasks.Task SendMessageToUserAsync(System.Guid authorId, System.Guid recipientId, string message) {
            return base.Channel.SendMessageToUserAsync(authorId, recipientId, message);
        }
        
        public void SaveDirectumTaskPublishEvent(System.Guid appSessionId, System.Guid taskId) {
            base.Channel.SaveDirectumTaskPublishEvent(appSessionId, taskId);
        }
        
        public System.Threading.Tasks.Task SaveDirectumTaskPublishEventAsync(System.Guid appSessionId, System.Guid taskId) {
            return base.Channel.SaveDirectumTaskPublishEventAsync(appSessionId, taskId);
        }
        
        public void StartDirectumTaskPublishEvent(System.Guid appSessionId, System.Guid taskId) {
            base.Channel.StartDirectumTaskPublishEvent(appSessionId, taskId);
        }
        
        public System.Threading.Tasks.Task StartDirectumTaskPublishEventAsync(System.Guid appSessionId, System.Guid taskId) {
            return base.Channel.StartDirectumTaskPublishEventAsync(appSessionId, taskId);
        }
        
        public void StopDirectumTaskPublishEvent(System.Guid appSessionId, System.Guid taskId) {
            base.Channel.StopDirectumTaskPublishEvent(appSessionId, taskId);
        }
        
        public System.Threading.Tasks.Task StopDirectumTaskPublishEventAsync(System.Guid appSessionId, System.Guid taskId) {
            return base.Channel.StopDirectumTaskPublishEventAsync(appSessionId, taskId);
        }
        
        public void PerformDirectumTaskPublishEvent(System.Guid appSessionId, System.Guid taskId) {
            base.Channel.PerformDirectumTaskPublishEvent(appSessionId, taskId);
        }
        
        public System.Threading.Tasks.Task PerformDirectumTaskPublishEventAsync(System.Guid appSessionId, System.Guid taskId) {
            return base.Channel.PerformDirectumTaskPublishEventAsync(appSessionId, taskId);
        }
        
        public void AcceptDirectumTaskPublishEvent(System.Guid appSessionId, System.Guid taskId) {
            base.Channel.AcceptDirectumTaskPublishEvent(appSessionId, taskId);
        }
        
        public System.Threading.Tasks.Task AcceptDirectumTaskPublishEventAsync(System.Guid appSessionId, System.Guid taskId) {
            return base.Channel.AcceptDirectumTaskPublishEventAsync(appSessionId, taskId);
        }
        
        public void RejectDirectumTaskPublishEvent(System.Guid appSessionId, System.Guid taskId) {
            base.Channel.RejectDirectumTaskPublishEvent(appSessionId, taskId);
        }
        
        public System.Threading.Tasks.Task RejectDirectumTaskPublishEventAsync(System.Guid appSessionId, System.Guid taskId) {
            return base.Channel.RejectDirectumTaskPublishEventAsync(appSessionId, taskId);
        }
        
        public void SavePriceCalculationPublishEvent(System.Guid appSessionId, System.Guid priceCalculationId) {
            base.Channel.SavePriceCalculationPublishEvent(appSessionId, priceCalculationId);
        }
        
        public System.Threading.Tasks.Task SavePriceCalculationPublishEventAsync(System.Guid appSessionId, System.Guid priceCalculationId) {
            return base.Channel.SavePriceCalculationPublishEventAsync(appSessionId, priceCalculationId);
        }
        
        public System.Guid[] StartPriceCalculationPublishEvent(System.Guid appSessionId, System.Guid priceCalculationId, System.Guid[] targetUsersIds) {
            return base.Channel.StartPriceCalculationPublishEvent(appSessionId, priceCalculationId, targetUsersIds);
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> StartPriceCalculationPublishEventAsync(System.Guid appSessionId, System.Guid priceCalculationId, System.Guid[] targetUsersIds) {
            return base.Channel.StartPriceCalculationPublishEventAsync(appSessionId, priceCalculationId, targetUsersIds);
        }
        
        public void FinishPriceCalculationPublishEvent(System.Guid appSessionId, System.Guid priceCalculationId) {
            base.Channel.FinishPriceCalculationPublishEvent(appSessionId, priceCalculationId);
        }
        
        public System.Threading.Tasks.Task FinishPriceCalculationPublishEventAsync(System.Guid appSessionId, System.Guid priceCalculationId) {
            return base.Channel.FinishPriceCalculationPublishEventAsync(appSessionId, priceCalculationId);
        }
        
        public void CancelPriceCalculationPublishEvent(System.Guid appSessionId, System.Guid priceCalculationId) {
            base.Channel.CancelPriceCalculationPublishEvent(appSessionId, priceCalculationId);
        }
        
        public System.Threading.Tasks.Task CancelPriceCalculationPublishEventAsync(System.Guid appSessionId, System.Guid priceCalculationId) {
            return base.Channel.CancelPriceCalculationPublishEventAsync(appSessionId, priceCalculationId);
        }
        
        public void RejectPriceCalculationPublishEvent(System.Guid appSessionId, System.Guid priceCalculationId) {
            base.Channel.RejectPriceCalculationPublishEvent(appSessionId, priceCalculationId);
        }
        
        public System.Threading.Tasks.Task RejectPriceCalculationPublishEventAsync(System.Guid appSessionId, System.Guid priceCalculationId) {
            return base.Channel.RejectPriceCalculationPublishEventAsync(appSessionId, priceCalculationId);
        }
        
        public void SaveIncomingRequestPublishEvent(System.Guid appSessionId, System.Guid requestId) {
            base.Channel.SaveIncomingRequestPublishEvent(appSessionId, requestId);
        }
        
        public System.Threading.Tasks.Task SaveIncomingRequestPublishEventAsync(System.Guid appSessionId, System.Guid requestId) {
            return base.Channel.SaveIncomingRequestPublishEventAsync(appSessionId, requestId);
        }
        
        public void SaveIncomingDocumentPublishEvent(System.Guid appSessionId, System.Guid documentId) {
            base.Channel.SaveIncomingDocumentPublishEvent(appSessionId, documentId);
        }
        
        public System.Threading.Tasks.Task SaveIncomingDocumentPublishEventAsync(System.Guid appSessionId, System.Guid documentId) {
            return base.Channel.SaveIncomingDocumentPublishEventAsync(appSessionId, documentId);
        }
        
        public void SaveTechnicalRequarementsTaskPublishEvent(System.Guid appSessionId, System.Guid technicalRequarementsTaskId) {
            base.Channel.SaveTechnicalRequarementsTaskPublishEvent(appSessionId, technicalRequarementsTaskId);
        }
        
        public System.Threading.Tasks.Task SaveTechnicalRequarementsTaskPublishEventAsync(System.Guid appSessionId, System.Guid technicalRequarementsTaskId) {
            return base.Channel.SaveTechnicalRequarementsTaskPublishEventAsync(appSessionId, technicalRequarementsTaskId);
        }
        
        public void StartTechnicalRequarementsTaskPublishEvent(System.Guid appSessionId, System.Guid technicalRequarementsTaskId) {
            base.Channel.StartTechnicalRequarementsTaskPublishEvent(appSessionId, technicalRequarementsTaskId);
        }
        
        public System.Threading.Tasks.Task StartTechnicalRequarementsTaskPublishEventAsync(System.Guid appSessionId, System.Guid technicalRequarementsTaskId) {
            return base.Channel.StartTechnicalRequarementsTaskPublishEventAsync(appSessionId, technicalRequarementsTaskId);
        }
        
        public void InstructTechnicalRequarementsTaskPublishEvent(System.Guid appSessionId, System.Guid technicalRequarementsTaskId) {
            base.Channel.InstructTechnicalRequarementsTaskPublishEvent(appSessionId, technicalRequarementsTaskId);
        }
        
        public System.Threading.Tasks.Task InstructTechnicalRequarementsTaskPublishEventAsync(System.Guid appSessionId, System.Guid technicalRequarementsTaskId) {
            return base.Channel.InstructTechnicalRequarementsTaskPublishEventAsync(appSessionId, technicalRequarementsTaskId);
        }
        
        public void StopTechnicalRequarementsTaskPublishEvent(System.Guid appSessionId, System.Guid technicalRequarementsTaskId) {
            base.Channel.StopTechnicalRequarementsTaskPublishEvent(appSessionId, technicalRequarementsTaskId);
        }
        
        public System.Threading.Tasks.Task StopTechnicalRequarementsTaskPublishEventAsync(System.Guid appSessionId, System.Guid technicalRequarementsTaskId) {
            return base.Channel.StopTechnicalRequarementsTaskPublishEventAsync(appSessionId, technicalRequarementsTaskId);
        }
        
        public void RejectTechnicalRequarementsTaskPublishEvent(System.Guid appSessionId, System.Guid technicalRequarementsTaskId) {
            base.Channel.RejectTechnicalRequarementsTaskPublishEvent(appSessionId, technicalRequarementsTaskId);
        }
        
        public System.Threading.Tasks.Task RejectTechnicalRequarementsTaskPublishEventAsync(System.Guid appSessionId, System.Guid technicalRequarementsTaskId) {
            return base.Channel.RejectTechnicalRequarementsTaskPublishEventAsync(appSessionId, technicalRequarementsTaskId);
        }
        
        public void RejectByFrontManagerTechnicalRequarementsTaskPublishEvent(System.Guid appSessionId, System.Guid technicalRequarementsTaskId) {
            base.Channel.RejectByFrontManagerTechnicalRequarementsTaskPublishEvent(appSessionId, technicalRequarementsTaskId);
        }
        
        public System.Threading.Tasks.Task RejectByFrontManagerTechnicalRequarementsTaskPublishEventAsync(System.Guid appSessionId, System.Guid technicalRequarementsTaskId) {
            return base.Channel.RejectByFrontManagerTechnicalRequarementsTaskPublishEventAsync(appSessionId, technicalRequarementsTaskId);
        }
        
        public void FinishTechnicalRequarementsTaskPublishEvent(System.Guid appSessionId, System.Guid technicalRequarementsTaskId) {
            base.Channel.FinishTechnicalRequarementsTaskPublishEvent(appSessionId, technicalRequarementsTaskId);
        }
        
        public System.Threading.Tasks.Task FinishTechnicalRequarementsTaskPublishEventAsync(System.Guid appSessionId, System.Guid technicalRequarementsTaskId) {
            return base.Channel.FinishTechnicalRequarementsTaskPublishEventAsync(appSessionId, technicalRequarementsTaskId);
        }
        
        public void AcceptTechnicalRequarementsTaskPublishEvent(System.Guid appSessionId, System.Guid technicalRequarementsTaskId) {
            base.Channel.AcceptTechnicalRequarementsTaskPublishEvent(appSessionId, technicalRequarementsTaskId);
        }
        
        public System.Threading.Tasks.Task AcceptTechnicalRequarementsTaskPublishEventAsync(System.Guid appSessionId, System.Guid technicalRequarementsTaskId) {
            return base.Channel.AcceptTechnicalRequarementsTaskPublishEventAsync(appSessionId, technicalRequarementsTaskId);
        }
    }
}
