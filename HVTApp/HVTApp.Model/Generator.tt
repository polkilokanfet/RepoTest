<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\HVTApp.Model\bin\Debug\HVTApp.Infrastructure.dll" #>
<#@ assembly name="$(SolutionDir)\HVTApp.Model\bin\Debug\HVTApp.Model.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HVTApp.Model.POCOs" #>
<#@ import namespace="HVTApp.Infrastructure" #>
<#@ output extension=".cs" #>
<#
	var modelTypes = GetModelTypes();

    GeneratePocos(modelTypes);
	SaveGeneratedCodeAsFile("POCOs.g.cs", "POCOs/Generated");
#>

<#+

    private void GeneratePocos(IEnumerable<Type> modelTypes)
    {
#>using System;
using HVTApp.Infrastructure;

namespace HVTApp.Model.POCOs
{
<#+
        foreach(var modelType in modelTypes)
        {
            GeneratePoco(modelType);
        }
#>}
<#+
    }

	private void GeneratePoco(Type modelType)
	{
		var allProperties = modelType.GetProperties();
		var allSimpleProperties = allProperties.Where(p => IsSimple(p.PropertyType));
				
		//Перечисления
		var allCollectionProperties = allProperties.Except(allSimpleProperties)
				.Where(p => p.PropertyType.GetInterfaces()
				.Any(x => x.IsGenericType && x.GetGenericTypeDefinition() == typeof(ICollection<>)));

		//Сложные свойства
		var allComplexProperties = allProperties.Except(allSimpleProperties).Except(allCollectionProperties);

#>
	public partial class <#=modelType.Name#>
	{
<#+ GenerateIdsComplexProperties(allComplexProperties);#>
	}

<#+
	}

    //берем все классы модели.
    private IEnumerable<Type> GetModelTypes()
    {
        var ns = typeof(Address).Namespace;
        //return typeof(Address).Assembly.GetTypes().Where(x => !x.IsAbstract && !x.IsEnum && x.Namespace == ns && !x.Name.Contains("<"));
        return typeof(Address).Assembly.GetTypes().Where(x => GetBaseTypes(x).Contains(typeof(BaseEntity)));
    }
    
	private IEnumerable<Type> GetBaseTypes(Type type)
        {
            List<Type> result = new List<Type>();
            while (type.BaseType != null)
            {
                result.Add(type.BaseType);
                type = type.BaseType;
            }
            return result;
        }


    //тип простой
    private bool IsSimple(Type type)
    {
        return type.IsValueType || type.IsValueType || type == typeof (string);
    }

    //коллекция простых типов?
    private bool CollectionMemberTypeIsSimple(Type genericCollectionType)
    {
        var tt = genericCollectionType.GetInterfaces();
        var t = genericCollectionType.GetInterfaces()
            .First(x => x.IsGenericType && x.GetGenericTypeDefinition() == typeof (ICollection<>))
            .GetGenericArguments()[0];

        return IsSimple(t);
    }
    
    //сохранение сгенерированного кода в отдельный файл.
    private void SaveGeneratedCodeAsFile(string fileName, string filePath)
    {
		string directoryName = Path.GetDirectoryName(Host.TemplateFile);
        string dir = Path.Combine(directoryName, filePath);
  
        string outputFilePath = Path.Combine(dir, fileName);
        File.WriteAllText(outputFilePath, GenerationEnvironment.ToString()); 
 
        GenerationEnvironment.Clear();
    }

    //возвращаем имя типа
    private string GetTypeName(Type type)
    {
        if (type.IsGenericType)
        {
            var genericArguments = type.GetGenericArguments().Select(t => GetTypeName(t)).ToArray();
            var typeDefinition = type.GetGenericTypeDefinition().FullName;
            typeDefinition = typeDefinition.Substring(0, typeDefinition.IndexOf('`'));
            return string.Format("{0}<{1}>", typeDefinition, string.Join(",", genericArguments));
        }
        else
        {
            return type.FullName;
        }
    }

  private void GenerateIdsComplexProperties(IEnumerable<PropertyInfo> properties)
  {
  	if (!properties.Any()) return;

    foreach (var property in properties)
    {
      var propertyType = property.PropertyType.Name;
      var propertyName = property.Name;
#>
		public virtual Guid? <#= propertyName #>Id { get; set; }
<#+
    }
  }

#>